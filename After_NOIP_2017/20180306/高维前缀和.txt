奇怪的姿势:高维前缀和

首先请先看一题:

Bzoj5092:

一句话题面:
我们做xor前缀和后，对每一个i，输出j<i,max(s[i]^s[j]+s[j])。

一般人估计上来就想可持久化Trie了。
然而我们发现，对于某一位，如果s[i]这位为1，对于s[j]，这位如果是0的话贡献为1，是1的话贡献为0。
but，如果s[i]这位为0，那么对于s[j]，这位如果是0的话贡献为0，是1的话贡献为2。
等等，这怎么还带进位的？这玩意能做？

可持久化Trie当然是做不了的，于是我们需要一种叫做高维前缀和的东西。
考虑我们如果把i的二进制表示看做一个集合(状态压缩总会吧)，我们要统计i的超集的一些信息。
说人话，就是对于i，我们要满足统计(j&i)==i的j的一些信息。
这就是高维前缀和所做的事情了。
如何统计?
我们先从低到高满足j和i存在差异的第一个位置，然后对不包含这个位置的i补全这个位置，并统计答案。
也就是: 
if( ! ( i & ( 1 << b ) ) ) f[i] = f[i] add f[i|(1<<b)]
这里的add可以是任何满足加和性质的运算，比如+,^,min(),max(),等等。
考虑这样做为什么是对的，首先和i在更低位置有差异的已经被统计了(废话，看你前面位数怎么循环的)。
然后考虑此时的f[j](这里j=i|(1<<b))，他包含了和j在更低位置存在差异的数值的信息。
也就是说，我们在把f[j]的信息加入f[i]的同时，同时加入了和i在这一位有差异且在更低位有差异的所有值的信息。
所以这个东西不会漏算。
为什么不会算重？因为我们统计的时候每次的最高差异位是不同的！

考虑如何用这个东西来完成Bzoj5092。
我们令f[k]表示二进制表示包含k的最靠前位置。
然后我们从高到低贪心枚举位数。
如果s[i]的当前位为1，我们对于s[j]此位选择0和1都相同，我们可以忽略这位。
如果s[i]当前位为0，我们就要贪心选择s[j]当前位为1的j。
假设我们已经选出的状态为cur。如果我们能够找到这样的j的话，需要满足的条件是:f[cur^(1<<b)]<=i。
去判定一下就可以了。

代码：


其实关于高维前缀和还有一道更经典的题目:
SPOJ TLE:

网上抄的中文题面:
给出n个数字c，求非负整数序列a，满足a<2^m。 
并且有a[i]&a[i+1]=0，对于每个a[i]，要保证a[i]不是c[i]的倍数。 
求这样的a[i]序列的个数。 

我们考虑DP，设f[i][j]表示前i位最后一位为j的方案数。
我们枚举下一位选择的数，假设为x，这样我们需要满足a[i+1]%c[i+1]!=0。
且对于第i位选择的数，j & x == 0。
这是什么意思呢?考虑我们对x的二进制表示求补集为w， j需要为w的子集。
高维前缀和也能统计子集信息，只要我们修改一下转移条件和转移来源就好了。
if( i & ( 1 << b ) ) f[i] += f[i^(1<<b)]。
就是把这一个差异位去掉啦。
什么，你说枚举子集，我们也能够用一个for循环实现？
for(int ss=s;ss;ss=s&(ss-1))
但是这不能原地址运算吧，而高维前缀和可以(可能在统计子集上也就这点优势了)。
然而统计超集，你告诉我一个for循环怎么做?这才是高维前缀和发挥作用的地方。

代码：


PS:话说作为一个高二省选选手，以前竟然连这东西都不会，我果然还是太菜了啊。
我不够努力；我不够强；我还能做得更好，然而我没有；我是错误的；我在犯罪；我该死。 
